/*grammar exercises*/
1.  a = 2; b = 0; c = 1; d = 2.
    a起始赋值为1，执行++a时，a的值自增1，因此a变为2;
    b起始赋值为0，未作修改，仍为0;
    c起始赋值为0，后赋值为1，最终为1;
    d赋值为a*c，即d = 2 * 1 = 2.

2.  输出结果为15.
    假设输出值为c, (a++) * (++b)语句等价于
    "b = b + 1; c = a * b; a = a + 1;"因此，b被赋为5，c = 3 * 5 = 15.

3.  输出结果为"i > j".
    表达式包含int和unsigned int, int被转化为unsigned int,以补码形式储存,
    -1的补码大于1，因此输出"i > j".

4.  输出结果为2, 5.
    未说明a[ ]时,默认为a[0],则*(a + 1) = a[1] = 2;
    执行(int *)(&a + 1)操作时,a指向'\0',
    进行*(ptr - 1)后指向数组最后一位,即5;

5.  输出结果为10, 20, 30.
    该列数定义为2行3列的二维数组，即p[0][0]为10;
    *(p[0] + 1)等价于p[0][1],即20;
    (*p)[2]等价于p[0][2],即30.

6.  输出结果为0.
    str只有4个元素，对应str[0]至str[3],
    则*(p + 4)对应NULL,即输出的ASC码为0.

7.  n的值为2.
    n起始赋值为2,进行与运算时，前部分为假，
    则后部分不进行运算，n值仍为2.

8.  sizeof(dog)为10,strlen(dog)为4.
    执行sizeof运算时,从第一位算至最后一位,长度为10;
    执行strlen运算时,进行至'\0'停止,因此长度为4.

9.  输出结果为0x801005, 0x810028(64位系统)
    前者指针变量指向字符型,"+5"表示指针向后移动5个字节,因此为0x801005;
    后者指针变量指向长整型,在64位系统中,"+5"对应40个字节,
    转化为16进制是28,因此为0x810028.

10. func(1)值为7.
    static所附值为静态变量,每轮循环时值为最近一次储存值,
    因此,当满足退出循环条件时,return值为7.
